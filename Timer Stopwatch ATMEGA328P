/*
 * File:   Minor Project.c
 * Author: rahul das
 *
 * Created on 12 March 2023, 5:53 PM
 */

#include <xc.h>
#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint8_t count_ms = 0;

ISR(PCINT1_vect){
    count_ms = count_ms + 10; // every time interrupt occurs, add 10ms to count
}


const uint8_t SEGMENT_MAP[] = {
    0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,
    };

uint8_t segmentMap(uint8_t value) {
    return SEGMENT_MAP[value];
}

void setup() {
    DDRD = 0b10010000;
    PORTD = 0b11111111;
    DDRB = 0b00000001;
    PORTB = 0b11111111;
}

void timerSetup() {
    TCCR1A = 0;
    TCCR1B = 0b00001011;
    TCCR1C = 0;
    TCNT1 = 0;
    OCR1A = 249;
    OCR1B = 0;
    ICR1 = 0;
    TIMSK1 = 0b00000010;
    TIFR1 = 0;
}

void sendData(uint8_t segments, uint8_t digits) {
   
}


const uint8_t SEGMENT_MAP[] = {
    0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,
    };

uint8_t segmentMap(uint8_t value) {
    return SEGMENT_MAP[value];
}



enum STATE {initial,counting,pause};
enum STATE current_state;        // Current state of the state machine
 


void setup () {
    
    DDRC  &= 0b11111001;    // PORTC pin 1-3 (A1 & A2) input
    PORTC |= 0b00000110;    // turn on internal pullup for Port C pins
    DDRB  = 0b00000001; 
    PORTB = 0b11111111;
   }

void setuptimer () {
    
    TCCR1A = 0b00000000 ;
    TCCR1B = 0b00001101;
    OCR1A = 15624;
    TCCR1C = 0;
    TCNT1 = 0;
    OCR1B = 0;
    ICR1 = 0;
    TIFR1 = 0;
    TIMSK1 = 0b00000010; 
}

int main(void){
    
    setup();
    setuptimer();
    sei();
    
    uint8_t button_time = 0;
    uint8_t button_value = 0b00000100;
    uint8_t button_state = 0b00000100;
    uint8_t button = 0;
    uint8_t now = 0;
    
     while(1){
        if(count_ms > button_time){
            button_value = (PINC & 0b00000100);          // saving current input state
            if ((button_value ^ button_state) == 0) {    // check if state has changed
                button_state = button_value;             // store changed state of button
                button_time = count_ms + 10;             // add debounce time
                button = (button_value == 0)?1:0;          // set whether button pressed or released
            }
        }
    now = count_ms;  
    current_state = initial;
    while (1) {
        switch(current_state) {
           case initial:
                if ((now > button_time) & (button == 1)) { // button 2 is pressed
                    current_state = counting; 
                    
                } else {
                    current_state = initial;   
                    // segment timer resets
                }
                break;
           
            case counting:
                if ((PINC & 0b00000010) == 0){               // if button 1 is pressed
                current_state = pause;
                // waits 1 second 
                current_state = initial;
              // segment timer resets
                }
                break;
               
                
            case pause:
                if ((now > button_time) & (button == 1)) { // button 2 is pressed
                    current_state = counting;
                    // time is displayed
                } else {
                    current_state = initial;
                    //
                        }   
                }
        }
    }
}


